#!/usr/bin/env bash
# 
# post-merge kancası tarafından çağrılması beklenir. Yayınlama betiğini çağıran kanca, yeni sürüm 
# numarasıyla birlikte çağırmalıdır.
# $1: Sürüm numarası

# MPLABX için yayınlama işlemleri
source etkilesim # Buradan yalnızca etkilesim işlevleri çağrıldığı için source etmek gerekiyor

yayinlaBaslik="$urtotm_dialogBaslik - Yayınla"

# Üretim dizinleri
# ATTENTION Üretim dizinlerinde oluşturulacak platform alt dizinleri, hedef platformu belirtmelidir.
# Örneğin urtotm-bash, mplabx platfomu için kurulacaksa, üretim alt dizinleri mplabx olmalıdır.
# $platform değişkeni urtotm-bash, yani ilgili üretim otomasyonu platformunun üretim otomasyonunu
# temsil eder.
surumlerUrtotmProjeDizini="${urtotm_projeCiktiDizini}/üretim/sürümler/${urtotm_projeAdi}"
ensonSurumUrtotmProjeDizini="${urtotm_projeCiktiDizini}/üretim/ensonsürüm/${urtotm_projeAdi}"

if [[ ! -e "$surumlerUrtotmProjeDizini" || ! -d "$surumlerUrtotmProjeDizini" ]]; then
    mkdir -p "$surumlerUrtotmProjeDizini" # ürünler dizini yoksa yarat
fi

if [[ ! -e "$ensonSurumUrtotmProjeDizini" || ! -d "$ensonSurumUrtotmProjeDizini" ]]; then
    mkdir -p "$ensonSurumUrtotmProjeDizini" # ürünler dizini yoksa yarat
fi

# Yayınlanan sürümler dizini
# Yayınlama aşamasına gelmeden projenin ilgili sürümünün [urtotm_projeYedeklemeDizini] içerisine görüntüsünün
# alınmış olması beklenir. Normalde goruntu betiği bu değişkeni, diğer üretim otomasyonu 
# betiklerine görünür olması için export eder. Ancak yine de yoklamak en iyisi.
if [[ ! -e $projeGoruntuArsivi ]]; then
# Bu kabuk oturumunda proje görüntü arşivi tanımlanmamış, burada sürüm numarasına göre ara.
# Arama kriteri; dosyanın 10 dakika veya daha az bir süre içinde değiştirilmiş olması.
# find Yedekler -type f -name "[proe adı]*[sürüm no]*.zip" -mmin -10*
# ATTENTION find en yeni olanı en son listeler.
    echo "Proje adı: [$urtotm_projeAdi], sürüm: [$1]"
    echo "Yedek dizini: [$urtotm_projeYedeklemeDizini]"
    projeGoruntuArsivi=$(find "$urtotm_projeYedeklemeDizini" -type f -name "${urtotm_projeAdi}*${1}*.zip" -mmin -10 | tail -1)
    echo "Proje görüntü arşivi bul: $projeGoruntuArsivi"
    if [[ -z "$projeGoruntuArsivi" ]]; then
        # Bulunan arşiv sürüm numarası içermiyor
        mesajGoster hata "$yayinlaBaslik" "Yedek dizininde sürüm numarası içeren bir görüntü arşivi bulunamadı!"
        exit 1
    fi
    projeGoruntuArsivi=$(realpath "$projeGoruntuArsivi") # tam yolu al
    echo "Proje arşivi tam yolu: $projeGoruntuArsivi" 
fi
cp "$projeGoruntuArsivi" "$surumlerUrtotmProjeDizini"
projeSurumArsivi="${projeGoruntuArsivi##*/}"
echo "projeSurumArsivi $projeSurumArsivi"

# projeGoruntuArsivi girdisini urtotm_projeUrtotmEnv dosyasından sil
sed -i '/^export projeGoruntuArsivi*/d' "$urtotm_projeUrtotmenv"

# ensonsürüm dizninde ne varsa temizle ve son sürümü kopyala
# ATTENTION '*' karakteri litreal içerisine alınırsa genişletilmez. Örneğin
# rm -f "$ensonSurumUrtotmProjeDizini/*" kabuk tarafından bir literal karakter olarak tanınacak ve
# genişletilmeyecektir. Dolayısıyla rm komutu '*' adında bir dosya bulamayacağından hiçbir şey
# silmez. Bu nedenle '*' wildcard olarak kullanılmak isteniyorsa, tırnak içine alınmamalıdır.
rm -rf "${ensonSurumUrtotmProjeDizini}/"*

# Ürün işlemleri
# find komutu bulunan dizinleri listelemeye en alt dizinlerden başlıyor gibi. Bu yüzden hedefin 
# alt dizinlerinde başka repolar varsa önce alt dizindeki repoların hooks dizinlerini listeler.
# Biz burada projenin kendi git reposu ile ilgilendiğimiz için yalnızca projenin reposunun
# hooks dizinini alacağız. Birden fazla repo olması durumunda projenin reposu en altta olacağı
# için tail -1 komutuya en sondan birinci çıktıyı alacağız. tail komutu yalnızca bir repo olduğu
# durumda da sorun yaratmayacaktır.
gitReposu="$(find "$urtotm_projeDizini" -type d -name .git | tail -1)"
if [[ -z $gitReposu ]]; then
    mesajGoster hata "$yayinlaBaslik" "$urtotm_projeDizini proje dizininde bir git reposu bulunamadı!"
    exit 1
fi

if ! GIT_DIR="$gitReposu" git archive main ':!test*/*' | tar -xf - -C "$ensonSurumUrtotmProjeDizini"
then
    mesajGoster hata "$yayinlaBaslik" "$urtotm_projeAdi projesinin enson sürüm üretimi sırasında hata oluştu!"
    exit 1
fi

if [[ "$urtotm_projeAdi" =~ [Aa]raclar ]]; then
    # Araçların güncelleme yapısı farklı, onu burada hallet
    urtotmAraclarBinDizini=~/.local/bin
    if [[ ! -e "$urtotmAraclarBinDizini" || ! -d "$urtotmAraclarBinDizini" ]]; then
        if ! mkdir -p "$urtotmAraclarBinDizini"; then
            mesajGoster hata "$yayinlaBaslik" "$urtotm_projeAdi projesi için $urtotmAraclarBinDizini yaratılamadı.\nmkdir Hata kodu: $?" &
            exit 1
        fi
    fi
    if ! rsync -qa --delete "${ensonSurumUrtotmProjeDizini}/" "${urtotmAraclarBinDizini}/"; then
        mesajGoster hata "$yayinlaBaslik" "$urtotm_projeAdi projesinin dosyaları hedefe kopyalanırken hata.\nrsync Hata kodu: $?" &
        exit 1
    fi
elif [[ ! "$urtotm_projeAdi" =~ [Kk]urulum ]]; then
    # urtotm Kurulum projesinin şimdilik bir hedefi yok, mevcut projenin kurulum olmadığından
    # emin ol.
    # Güncellenecekler listesini yokla ve gerekli hedefleri güncelle.
    # ATTENTION! Güncelleme listesini ensonsürüm dizininden aramaya başla
    ensonSurumDizini="${ensonSurumUrtotmProjeDizini%/*}"
    guncellemeDosyasi=$(find "$ensonSurumDizini" -type f -name .guncellemeListesi | tail -1)
    if [[ -e $guncellemeDosyasi && -f $guncellemeDosyasi ]]; then
        # Kayıtlı hedeflerin üretim otomasyonunu güncelleme betiği güncelle
        # Platform proje adını DEĞİL, yalnızca platform adını ver
        guncelle "$ensonSurumUrtotmProjeDizini" "$(\
            awk -v plt="${urtotm_projeAdi#$urtotm_platform-}" \
            -F'::' '$1 == plt {print $3}' "$guncellemeDosyasi" | xargs)"
    fi
fi
